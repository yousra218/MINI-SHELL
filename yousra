#include "cell.h"

int cell_echo(char **args)
{
	int start = 1;
	bool newline = true;

	if (!args || !args[0])
		return (1);

	if (args[1] && !strcmp(args[1], "-n"))
	{
		newline = false;
		start = 2;
	}

	for (int i = start; args[i]; i++)
	{
		p("%s", args[i]);
		if (args[i + 1])
			p(" ");
	}

	if (newline)
		p("\n");

	return (0);
}

int cell_env(char **args)
{
	extern char **environ;

	(void)args;
	if (!environ)
		return (1);
	for (int i = 0; environ[i]; i++)
		p("%s\n", environ[i]);
	return (0);
}

int cell_exit(char **args)
{
	(void)args;
	dbzSpinnerLoading();
	exit(EX_OK);
}
Here's the cleaned-up version of your code with all comments removed:

```c
#include "cell.h"

int	status = 0;

t_builtin	g_builtin[] = 
{
	{.builtin_name = "echo", .foo=cell_echo},
	{.builtin_name = "env", .foo=cell_env},
	{.builtin_name = "exit", .foo=cell_exit},
	{.builtin_name = NULL},
};

void	cell_launch(char **args)
{
	if (Fork() == CELL_JR)
	{
		Execvp(args[0], args);
	}
	else
	{
		Wait(&status);
	}
}

void	cell_execute(char **args)
{
	int			i;
	const char	*curr_builtin;

	if (!args || !args[0])
		return ;
	i = 0;

	while ((curr_builtin = g_builtin[i].builtin_name))
	{
		if (!strcmp(args[0], curr_builtin))
		{
			if ((status = (g_builtin[i].foo)(args)))
				p("%s failed\n", curr_builtin);
			return ;
		}
		i++;
	}
	
	cell_launch(args);
}

char	*cell_read_line(void)
{
	char	*line;
	size_t	bufsize;
	char	cwd[BUFSIZ];

	line = NULL;
	bufsize = 0;
	if (isatty(fileno(stdin)))
	{
		if (status)
			p("🦠"C"[%s]"RED"[%d]"RST"🦠 > ", 
					Getcwd(cwd, BUFSIZ), 
					status);
		else
			p("🦠"C"[%s]"RST"🦠 > ", 
					Getcwd(cwd, BUFSIZ));
	}

	Getline(&line, &bufsize, stdin);
	return (line);
}

char	**cell_split_line(char *line)
{
	size_t			bufsize;
	unsigned long	position;
	char			**tokens;

	bufsize = BUFSIZ;
	position = 0;
	tokens = Malloc(bufsize * sizeof *tokens);

	for (char *token = strtok(line, SPACE); token; token = strtok(NULL, SPACE))
	{
		tokens[position++] = token;	
		if (position >= bufsize)
		{
			bufsize *= 2;
			tokens = Realloc(tokens, bufsize * sizeof *tokens);
		}
	}
	tokens[position] = NULL;
	return (tokens);
}

int	main()
{
	char	*line;
	char	**args;

	while ((line = cell_read_line()))
	{
		args = cell_split_line(line);	

		if (args[0] && !strcmp(args[0], "cd"))
			Chdir(args[1]);
		
		cell_execute(args);

		free(line);
		free(args);
	}

	return (EXIT_SUCCESS);
}
Here's the cleaned-up version of your code with all comments removed:

```c
#include "cell.h"

int	status = 0;

t_builtin	g_builtin[] = 
{
	{.builtin_name = "echo", .foo=cell_echo},
	{.builtin_name = "env", .foo=cell_env},
	{.builtin_name = "exit", .foo=cell_exit},
	{.builtin_name = NULL},
};

void	cell_launch(char **args)
{
	if (Fork() == CELL_JR)
	{
		Execvp(args[0], args);
	}
	else
	{
		Wait(&status);
	}
}

void	cell_execute(char **args)
{
	int			i;
	const char	*curr_builtin;

	if (!args || !args[0])
		return ;
	i = 0;

	while ((curr_builtin = g_builtin[i].builtin_name))
	{
		if (!strcmp(args[0], curr_builtin))
		{
			if ((status = (g_builtin[i].foo)(args)))
				p("%s failed\n", curr_builtin);
			return ;
		}
		i++;
	}
	
	cell_launch(args);
}

char	*cell_read_line(void)
{
	char	*line;
	size_t	bufsize;
	char	cwd[BUFSIZ];

	line = NULL;
	bufsize = 0;
	if (isatty(fileno(stdin)))
	{
		if (status)
			p("🦠"C"[%s]"RED"[%d]"RST"🦠 > ", 
					Getcwd(cwd, BUFSIZ), 
					status);
		else
			p("🦠"C"[%s]"RST"🦠 > ", 
					Getcwd(cwd, BUFSIZ));
	}

	Getline(&line, &bufsize, stdin);
	return (line);
}

char	**cell_split_line(char *line)
{
	size_t			bufsize;
	unsigned long	position;
	char			**tokens;

	bufsize = BUFSIZ;
	position = 0;
	tokens = Malloc(bufsize * sizeof *tokens);

	for (char *token = strtok(line, SPACE); token; token = strtok(NULL, SPACE))
	{
		tokens[position++] = token;	
		if (position >= bufsize)
		{
			bufsize *= 2;
			tokens = Realloc(tokens, bufsize * sizeof *tokens);
		}
	}
	tokens[position] = NULL;
	return (tokens);
}

int	main()
{
	char	*line;
	char	**args;

	while ((line = cell_read_line()))
	{
		args = cell_split_line(line);	

		if (args[0] && !strcmp(args[0], "cd"))
			Chdir(args[1]);
		
		cell_execute(args);

		free(line);
		free(args);
	}

	return (EXIT_SUCCESS);
}
Here's the cleaned-up version of your code with all comments removed:

```c
#include "cell.h"

void	Chdir(const char *path)
{
	if (!path)
	{
		fprintf(stderr, RED"cd: path argument required\n"RST);
		return ;
	}
	if (chdir(path) == -1)
		perror(RED"cd failed"RST);
}

pid_t	Fork(void)
{
	pid_t	pid;

	pid = fork();
	if (pid < 0)
	{
		perror(RED"Fork failed"RST);
		exit(EX_OSERR);
	}
	return (pid);
}

void	Execvp(const char *file, char *const argv[])
{
	if (!file || !argv)
	{
		fprintf(stderr, RED"Execvp: invalid arguments\n"RST);
		exit(EXIT_FAILURE);
	}
	if (execvp(file, argv) == -1)
	{
		perror(RED"💥CELL_Jr failed💥"RST);
		exit(EX_UNAVAILABLE);
	}
}

pid_t	Wait(int *status)
{
	pid_t	result;

	if (!status)
	{
		fprintf(stderr, RED"Wait: status argument required\n"RST);
		return (-1);
	}
	result = wait(status);
	if (result == -1)
		perror(RED"Wait failed"RST);
	if (WIFEXITED(*status))
		*status = WEXITSTATUS(*status); 
	return (result);
}

pid_t	Waitpid(pid_t pid, int *status, int options)
{
	pid_t	result;

	if (!status)
		return (-1);
	result = waitpid(pid, status, options);
	if (result == -1)
		perror(RED"Waitpid failed"RST);
	if (WIFEXITED(*status))
		*status = WEXITSTATUS(*status); 
	return (result);
}

void	*Malloc(size_t size)
{
	void	*ptr;

	if (size == 0)
		return (NULL);
	ptr = malloc(size);
	if (!ptr)
	{
		perror(RED"Malloc failed"RST);
		exit(EXIT_FAILURE);
	}
	return (ptr);
}

void	*Realloc(void *ptr, size_t size)
{
	void	*new_ptr;

	new_ptr = realloc(ptr, size);
	if (!new_ptr && size != 0)
	{
		perror(RED"Realloc failed"RST);
		exit(EXIT_FAILURE);
	}
	return (new_ptr);
}

char	*Getcwd(char *buf, size_t size)
{
	char	*result;

	result = getcwd(buf, size);
	if (!result)
		perror(RED"Getcwd failed"RST);
	return (result);
}

void	Getline(char **lineptr, size_t *n, FILE *stream)
{
	if (!lineptr || !stream)
	{
		fprintf(stderr, RED"Getline: invalid arguments\n"RST);
		return ;
	}
	if (getline(lineptr, n, stream) == -1)
	{
		free(*lineptr);
		*lineptr = NULL;
		if (feof(stream))
			printf(RED"[EOF]"RST"\n");
		else
			perror(RED"Getline failed"RST);
	}
}

void dbzSpinnerLoading() 
{
    const char *charging[] = {
        "[            ]",
        "[=           ]",
        "[==          ]",
        "[===         ]",
        "[====        ]",
        "[=====       ]",
        "[======      ]",
        "[=======     ]",
        "[========    ]",
        "[=========   ]",
        "[==========  ]",
        "[=========== ]",
        "[===========💥]",
    };
    const int frames = sizeof(charging) / sizeof(charging[0]);

	p(RED"Shutting down...\n"RST);

    for (int i = 0; i < frames; i++) {
        p("\r" Y "%s" RST, charging[i]);
        fflush(stdout);
        usleep(421337);  
    }
	p(C"\n✅ EXIT ✅\n"RST);
	exit(EX_OK);
}

void printbanner(void)
{
    p(G" ██████╗███████╗██╗     ██╗         ██╗   ██╗  ██╗\n"
      "██╔════╝██╔════╝██║     ██║         ██║   ██║ ███║\n"
      "██║     █████╗  ██║     ██║         ██║   ██║ ╚██║\n"
      "██║     ██╔══╝  ██║     ██║         ╚██╗ ██╔╝  ██║\n"
      "╚██████╗███████╗███████╗███████╗     ╚████╔╝██╗██║\n"
      " ╚═════╝╚══════╝╚══════╝╚══════╝      ╚═══╝ ╚═╝╚═╝\n"
      "                                                  \n"RST);
}
